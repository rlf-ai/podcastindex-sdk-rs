/*
 * PodcastIndex.org API
 *
 * Download the openapi spec in [json](pi_api.json) or [yaml](pi_api.yaml) format.  # Overview  The Podcast Index (Podcast Index LLC) is a software developer focused partnership that provides tools and data to anyone who aspires to create new and exciting Podcast experiences without the heavy lifting of indexing, aggregation and data management.  # Example Code  Users have provided example code for working the API in the following languages:    - [AWS Lambda - python](https://github.com/tbowers/python-podcastindex-org-lambda)   - [Bash](https://github.com/suorcd/Bash-podcastindex-org-example)   - [C#](https://github.com/ComicStrip/csharp-podcastindex-org-example)   - [Elisp](https://github.com/sabexx/elisp-example)   - [Flutter/Dart](https://github.com/crediblecreative/flutter-dart-podcastindex-org-example)   - [Go](https://github.com/ComicStrip/Go-podcastindex-org-example)   - [Go](https://github.com/kilobit/podcast-index-client)   - [Java](https://github.com/ComicStrip/Java-podcastindex-org-example)   - [Java](https://github.com/stucoates/PodcastIndexJavaClient)   - [Node.js](https://github.com/ComicStrip/node.js-podcastindex-org-example)   - [PHP](https://github.com/Podcastindex-org/example-code)   - [Python](https://github.com/tbowers/python-podcastindex-org-example)   - [Swift](https://github.com/ComicStrip/Swift-podcastindex-org-example)   - ... [More](https://github.com/Podcastindex-org-Examples)  Don't see your desired language, create an example repo and create a [Pull Request](https://github.com/Podcastindex-org/docs-api/pulls) with a link to your example code project!  # Libraries  User created libraries for working with the API:    - Java       - [podcast4j](https://github.com/yusufyilmazfr/podcast4j)   - .NET       - [PodcastIndexSharp](https://www.nuget.org/packages/PodcastIndexSharp)   - Node.js/npm/yarn       - [podcast-index-api](https://www.npmjs.com/package/podcast-index-api)       - [podcastdx-client](https://www.npmjs.com/package/podcastdx-client)   - PHP       - [podcastindex-php](https://github.com/LowSociety/podcastindex-php)   - Python/pip       - [python-podcastindex](https://pypi.org/project/python-podcastindex/)   - R       - [podindexr](https://github.com/rpodcast/podindexr)   - Ruby       - [podcast-index](https://github.com/jasonyork/podcast-index)   - Swift       - [PodcastIndexKit](https://github.com/SparrowTek/PodcastIndexKit)   - Kotlin       - [PodcastIndex-SDK](https://github.com/mr3y-the-programmer/PodcastIndex-SDK)  Are we missing a library? Did you create one for a different language? Create a [Pull Request](https://github.com/Podcastindex-org/docs-api/pulls) with a link to the new library!  # Postman  A collection file for use in the [Postman](https://www.postman.com/) application is available for this API.    1. Download the contents of the [Postman Docs](https://github.com/Podcastindex-org/docs-api/tree/master/Postman%20Docs) folder.   2. Import the `PodcastIndex.postman_collection.json` collection to Postman   3. Import the `PodcastIndexOrgEnvironment.postman_environment.json` to Postman   4. Click \"Environments\" on the left sidebar   5. Select the checkbox next to the PodcastIndexOrgEnvironment entry   6. Set `AuthKey` and `SeceretKey` values under the \"Current Value\" column using your API information    7. Click \"Collections\" from the sidebar   8. Select PodcastIndex   9. Select and run the endpoint to test  # Contributing  The source for this API documentation is available at [https://github.com/Podcastindex-org/docs-api](https://github.com/Podcastindex-org/docs-api). Submit an Issue or create a Pull Request.  # Authentication Details  Sending an API request is easy. We use an Amazon-style request authorization token to secure each request.   Register for a free API key at https://api.podcastindex.org/   These headers parameters are required for each request: `User-Agent`, `X-Auth-Date`, `X-Auth-Key`, `Authorization`   See [Authentication](#auth) for description of parameters.  # Legal  Legal    - [Privacy Policy](https://github.com/Podcastindex-org/legal/blob/main/PrivacyPolicy.md)   - [Terms of Service](https://github.com/Podcastindex-org/legal/blob/main/TermsOfService.md)   - [License](https://github.com/Podcastindex-org/docs-api/blob/master/LICENSE)
 *
 * The version of the OpenAPI document: 1.12.1
 * Contact: info@podcastindex.org
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EpisodeObject : Episode data
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EpisodeObject {
    /// The internal PodcastIndex.org episode ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Name of the feed
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The channel-level link in the feed
    #[serde(rename = "link", skip_serializing_if = "Option::is_none")]
    pub link: Option<String>,
    /// The item-level description of the episode.   Uses the longer of the possible fields in the feed: `<description>`, `<itunes:summary>` and `<content:encoded>`
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The unique identifier for the episode
    #[serde(rename = "guid", skip_serializing_if = "Option::is_none")]
    pub guid: Option<String>,
    /// The date and time the episode was published
    #[serde(rename = "datePublished", skip_serializing_if = "Option::is_none")]
    pub date_published: Option<i32>,
    /// The date and time the episode was published formatted as a human readable string.   Note: uses the PodcastIndex server local time to do conversion.
    #[serde(
        rename = "datePublishedPretty",
        skip_serializing_if = "Option::is_none"
    )]
    pub date_published_pretty: Option<String>,
    /// The time this episode was found in the feed
    #[serde(rename = "dateCrawled", skip_serializing_if = "Option::is_none")]
    pub date_crawled: Option<i32>,
    /// URL/link to the episode file
    #[serde(rename = "enclosureUrl", skip_serializing_if = "Option::is_none")]
    pub enclosure_url: Option<String>,
    /// The Content-Type for the item specified by the `enclosureUrl`
    #[serde(rename = "enclosureType", skip_serializing_if = "Option::is_none")]
    pub enclosure_type: Option<String>,
    /// The length of the item specified by the `enclosureUrl` in bytes
    #[serde(rename = "enclosureLength", skip_serializing_if = "Option::is_none")]
    pub enclosure_length: Option<i32>,
    /// The estimated length of the item specified by the `enclosureUrl` in seconds. Will be null for `liveItem`.
    #[serde(
        rename = "duration",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub duration: Option<Option<i32>>,
    #[serde(rename = "explicit", skip_serializing_if = "Option::is_none")]
    pub explicit: Option<models::ExplicitEpisode>,
    /// Episode number
    #[serde(
        rename = "episode",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub episode: Option<Option<i32>>,
    #[serde(
        rename = "episodeType",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub episode_type: Option<Option<models::EpisodeType>>,
    /// Season number. May be null for `liveItem`.
    #[serde(
        rename = "season",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub season: Option<Option<i32>>,
    /// The item-level image for the episode
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// A CRC32 hash of the `image` URL with the protocol (`http://`, `https://`) removed.
    #[serde(rename = "imageUrlHash", skip_serializing_if = "Option::is_none")]
    pub image_url_hash: Option<i32>,
    /// The iTunes ID of this feed if there is one, and we know what it is.
    #[serde(
        rename = "feedItunesId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub feed_itunes_id: Option<Option<i32>>,
    /// The channel-level image element.
    #[serde(rename = "feedImage", skip_serializing_if = "Option::is_none")]
    pub feed_image: Option<String>,
    /// A CRC32 hash of the `feedImage` URL with the protocol (`http://`, `https://`) removed.
    #[serde(rename = "feedImageUrlHash", skip_serializing_if = "Option::is_none")]
    pub feed_image_url_hash: Option<i32>,
    /// The internal PodcastIndex.org Feed ID.
    #[serde(rename = "feedId", skip_serializing_if = "Option::is_none")]
    pub feed_id: Option<i32>,
    /// Name of the feed
    #[serde(rename = "feedTitle", skip_serializing_if = "Option::is_none")]
    pub feed_title: Option<String>,
    /// The channel-level language specification of the feed.  Languages accord with the [RSS Language Spec](https://www.rssboard.org/rss-language-codes).
    #[serde(rename = "feedLanguage", skip_serializing_if = "Option::is_none")]
    pub feed_language: Option<String>,
    /// Link to the JSON file containing the episode chapters
    #[serde(
        rename = "chaptersUrl",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub chapters_url: Option<Option<String>>,
    /// List of transcripts for the episode. May not be reported.
    #[serde(
        rename = "transcripts",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub transcripts: Option<Option<Vec<models::Transcript>>>,
    /// List of people with an interest in this episode. May not be reported.   See the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#person) for more information.
    #[serde(
        rename = "persons",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub persons: Option<Option<Vec<models::Person>>>,
    /// List the social interact data found in the podcast feed. May not be reported.   See the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#social-interact) for more information.
    #[serde(
        rename = "socialInteract",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub social_interact: Option<Option<Vec<models::SocialInteractItem>>>,
    #[serde(
        rename = "value",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub value: Option<Option<Box<models::Value>>>,
    #[serde(
        rename = "soundbite",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub soundbite: Option<Option<Box<models::Soundbite>>>,
    /// Soundbites for episode. May not be reported.
    #[serde(
        rename = "soundbites",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub soundbites: Option<Option<Vec<models::Soundbite>>>,
}

impl EpisodeObject {
    /// Episode data
    pub fn new() -> EpisodeObject {
        EpisodeObject {
            id: None,
            title: None,
            link: None,
            description: None,
            guid: None,
            date_published: None,
            date_published_pretty: None,
            date_crawled: None,
            enclosure_url: None,
            enclosure_type: None,
            enclosure_length: None,
            duration: None,
            explicit: None,
            episode: None,
            episode_type: None,
            season: None,
            image: None,
            image_url_hash: None,
            feed_itunes_id: None,
            feed_image: None,
            feed_image_url_hash: None,
            feed_id: None,
            feed_title: None,
            feed_language: None,
            chapters_url: None,
            transcripts: None,
            persons: None,
            social_interact: None,
            value: None,
            soundbite: None,
            soundbites: None,
        }
    }
}
