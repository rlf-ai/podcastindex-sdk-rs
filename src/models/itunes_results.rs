/*
 * PodcastIndex.org API
 *
 * Download the openapi spec in [json](pi_api.json) or [yaml](pi_api.yaml) format.  # Overview  The Podcast Index (Podcast Index LLC) is a software developer focused partnership that provides tools and data to anyone who aspires to create new and exciting Podcast experiences without the heavy lifting of indexing, aggregation and data management.  # Example Code  Users have provided example code for working the API in the following languages:    - [AWS Lambda - python](https://github.com/tbowers/python-podcastindex-org-lambda)   - [Bash](https://github.com/suorcd/Bash-podcastindex-org-example)   - [C#](https://github.com/ComicStrip/csharp-podcastindex-org-example)   - [Elisp](https://github.com/sabexx/elisp-example)   - [Flutter/Dart](https://github.com/crediblecreative/flutter-dart-podcastindex-org-example)   - [Go](https://github.com/ComicStrip/Go-podcastindex-org-example)   - [Go](https://github.com/kilobit/podcast-index-client)   - [Java](https://github.com/ComicStrip/Java-podcastindex-org-example)   - [Java](https://github.com/stucoates/PodcastIndexJavaClient)   - [Node.js](https://github.com/ComicStrip/node.js-podcastindex-org-example)   - [PHP](https://github.com/Podcastindex-org/example-code)   - [Python](https://github.com/tbowers/python-podcastindex-org-example)   - [Swift](https://github.com/ComicStrip/Swift-podcastindex-org-example)   - ... [More](https://github.com/Podcastindex-org-Examples)  Don't see your desired language, create an example repo and create a [Pull Request](https://github.com/Podcastindex-org/docs-api/pulls) with a link to your example code project!  # Libraries  User created libraries for working with the API:    - Java       - [podcast4j](https://github.com/yusufyilmazfr/podcast4j)   - .NET       - [PodcastIndexSharp](https://www.nuget.org/packages/PodcastIndexSharp)   - Node.js/npm/yarn       - [podcast-index-api](https://www.npmjs.com/package/podcast-index-api)       - [podcastdx-client](https://www.npmjs.com/package/podcastdx-client)   - PHP       - [podcastindex-php](https://github.com/LowSociety/podcastindex-php)   - Python/pip       - [python-podcastindex](https://pypi.org/project/python-podcastindex/)   - R       - [podindexr](https://github.com/rpodcast/podindexr)   - Ruby       - [podcast-index](https://github.com/jasonyork/podcast-index)   - Swift       - [PodcastIndexKit](https://github.com/SparrowTek/PodcastIndexKit)   - Kotlin       - [PodcastIndex-SDK](https://github.com/mr3y-the-programmer/PodcastIndex-SDK)  Are we missing a library? Did you create one for a different language? Create a [Pull Request](https://github.com/Podcastindex-org/docs-api/pulls) with a link to the new library!  # Postman  A collection file for use in the [Postman](https://www.postman.com/) application is available for this API.    1. Download the contents of the [Postman Docs](https://github.com/Podcastindex-org/docs-api/tree/master/Postman%20Docs) folder.   2. Import the `PodcastIndex.postman_collection.json` collection to Postman   3. Import the `PodcastIndexOrgEnvironment.postman_environment.json` to Postman   4. Click \"Environments\" on the left sidebar   5. Select the checkbox next to the PodcastIndexOrgEnvironment entry   6. Set `AuthKey` and `SeceretKey` values under the \"Current Value\" column using your API information    7. Click \"Collections\" from the sidebar   8. Select PodcastIndex   9. Select and run the endpoint to test  # Contributing  The source for this API documentation is available at [https://github.com/Podcastindex-org/docs-api](https://github.com/Podcastindex-org/docs-api). Submit an Issue or create a Pull Request.  # Authentication Details  Sending an API request is easy. We use an Amazon-style request authorization token to secure each request.   Register for a free API key at https://api.podcastindex.org/   These headers parameters are required for each request: `User-Agent`, `X-Auth-Date`, `X-Auth-Key`, `Authorization`   See [Authentication](#auth) for description of parameters.  # Legal  Legal    - [Privacy Policy](https://github.com/Podcastindex-org/legal/blob/main/PrivacyPolicy.md)   - [Terms of Service](https://github.com/Podcastindex-org/legal/blob/main/TermsOfService.md)   - [License](https://github.com/Podcastindex-org/docs-api/blob/master/LICENSE)
 *
 * The version of the OpenAPI document: 1.12.1
 * Contact: info@podcastindex.org
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ItunesResults {
    /// The channel-level author element.   Usually iTunes specific, but could be from another namespace if not present.
    #[serde(rename = "artistName", skip_serializing_if = "Option::is_none")]
    pub artist_name: Option<String>,
    /// A URL for the artwork associated with the returned media type.   Note: Apple returns the image sized to value in the field name but the PodcastIndex returns the original image specified in the feed.
    #[serde(rename = "artworkUrl100", skip_serializing_if = "Option::is_none")]
    pub artwork_url100: Option<String>,
    /// A URL for the artwork associated with the returned media type.   Note: Apple returns the image sized to value in the field name but the PodcastIndex returns the original image specified in the feed.
    #[serde(rename = "artworkUrl30", skip_serializing_if = "Option::is_none")]
    pub artwork_url30: Option<String>,
    /// A URL for the artwork associated with the returned media type.   Note: Apple returns the image sized to value in the field name but the PodcastIndex returns the original image specified in the feed.
    #[serde(rename = "artworkUrl60", skip_serializing_if = "Option::is_none")]
    pub artwork_url60: Option<String>,
    /// A URL for the artwork associated with the returned media type.   Note: Apple returns the image sized to value in the field name but the PodcastIndex returns the original image specified in the feed.
    #[serde(rename = "artworkUrl600", skip_serializing_if = "Option::is_none")]
    pub artwork_url600: Option<String>,
    /// The name of the feed.   Note: Apple censors the name but PodcastIndex does not.
    #[serde(
        rename = "collectionCensoredName",
        skip_serializing_if = "Option::is_none"
    )]
    pub collection_censored_name: Option<String>,
    /// Indicates if the feed is marked explicit.
    #[serde(
        rename = "collectionExplicitness",
        skip_serializing_if = "Option::is_none"
    )]
    pub collection_explicitness: Option<CollectionExplicitness>,
    /// Price of content. Will always return 0.
    #[serde(rename = "collectionHdPrice", skip_serializing_if = "Option::is_none")]
    pub collection_hd_price: Option<i32>,
    /// The iTunes Feed ID
    #[serde(rename = "collectionId", skip_serializing_if = "Option::is_none")]
    pub collection_id: Option<i32>,
    /// Name of the feed
    #[serde(rename = "collectionName", skip_serializing_if = "Option::is_none")]
    pub collection_name: Option<String>,
    /// Price of content. Will always return 0.
    #[serde(rename = "collectionPrice", skip_serializing_if = "Option::is_none")]
    pub collection_price: Option<i32>,
    /// The URL for viewing the feed on the Apple website.
    #[serde(rename = "collectionViewUrl", skip_serializing_if = "Option::is_none")]
    pub collection_view_url: Option<String>,
    /// Indicates if the feed is explicit or clean.
    #[serde(
        rename = "contentAdvisoryRating",
        skip_serializing_if = "Option::is_none"
    )]
    pub content_advisory_rating: Option<ContentAdvisoryRating>,
    /// The country the feed is from.   Note: Right now, always returns \"USA\"
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// Currency `*Price` value is in.   Note: will always return \"USD\"
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    /// Current feed URL
    #[serde(rename = "feedUrl", skip_serializing_if = "Option::is_none")]
    pub feed_url: Option<String>,
    /// List of ids representing the names in the `genres`.   Values are determined by the IDs used in the url of genres on https://podcasts.apple.com/us/genre/podcasts/id26
    #[serde(rename = "genreIds", skip_serializing_if = "Option::is_none")]
    pub genre_ids: Option<Vec<i32>>,
    /// List of genre names.
    #[serde(rename = "genres", skip_serializing_if = "Option::is_none")]
    pub genres: Option<Vec<String>>,
    /// The kind of content returned by the search request.   Note: will always return \"podcast\"
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The primary genre name.
    #[serde(rename = "primaryGenreName", skip_serializing_if = "Option::is_none")]
    pub primary_genre_name: Option<String>,
    /// Date and time of request
    #[serde(rename = "releaseDate", skip_serializing_if = "Option::is_none")]
    pub release_date: Option<String>,
    /// The name of the feed.   Note: Apple censors the name but PodcastIndex does not.
    #[serde(rename = "trackCensoredName", skip_serializing_if = "Option::is_none")]
    pub track_censored_name: Option<String>,
    /// Number of episodes in feed
    #[serde(rename = "trackCount", skip_serializing_if = "Option::is_none")]
    pub track_count: Option<i32>,
    /// Indicates if the episode is marked explicit.
    #[serde(rename = "trackExplicitness", skip_serializing_if = "Option::is_none")]
    pub track_explicitness: Option<TrackExplicitness>,
    /// Price of content. Will always return 0.
    #[serde(rename = "trackHdPrice", skip_serializing_if = "Option::is_none")]
    pub track_hd_price: Option<i32>,
    /// Price of content. Will always return 0.
    #[serde(rename = "trackHdRentalPrice", skip_serializing_if = "Option::is_none")]
    pub track_hd_rental_price: Option<i32>,
    /// The iTunes Feed ID
    #[serde(rename = "trackId", skip_serializing_if = "Option::is_none")]
    pub track_id: Option<i32>,
    /// Name of the feed
    #[serde(rename = "trackName", skip_serializing_if = "Option::is_none")]
    pub track_name: Option<String>,
    /// Price of content. Will always return 0.
    #[serde(rename = "trackPrice", skip_serializing_if = "Option::is_none")]
    pub track_price: Option<i32>,
    /// Price of content. Will always return 0.
    #[serde(rename = "trackRentalPrice", skip_serializing_if = "Option::is_none")]
    pub track_rental_price: Option<i32>,
    /// The URL for viewing the feed on the Apple website.
    #[serde(rename = "trackViewUrl", skip_serializing_if = "Option::is_none")]
    pub track_view_url: Option<String>,
    /// The name of the object returned by the search request.   Note: will always return \"track\"
    #[serde(rename = "wrapperType", skip_serializing_if = "Option::is_none")]
    pub wrapper_type: Option<String>,
}

impl ItunesResults {
    pub fn new() -> ItunesResults {
        ItunesResults {
            artist_name: None,
            artwork_url100: None,
            artwork_url30: None,
            artwork_url60: None,
            artwork_url600: None,
            collection_censored_name: None,
            collection_explicitness: None,
            collection_hd_price: None,
            collection_id: None,
            collection_name: None,
            collection_price: None,
            collection_view_url: None,
            content_advisory_rating: None,
            country: None,
            currency: None,
            feed_url: None,
            genre_ids: None,
            genres: None,
            kind: None,
            primary_genre_name: None,
            release_date: None,
            track_censored_name: None,
            track_count: None,
            track_explicitness: None,
            track_hd_price: None,
            track_hd_rental_price: None,
            track_id: None,
            track_name: None,
            track_price: None,
            track_rental_price: None,
            track_view_url: None,
            wrapper_type: None,
        }
    }
}
/// Indicates if the feed is marked explicit.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CollectionExplicitness {
    #[serde(rename = "explicit")]
    Explicit,
    #[serde(rename = "cleaned")]
    Cleaned,
}

impl Default for CollectionExplicitness {
    fn default() -> CollectionExplicitness {
        Self::Explicit
    }
}
/// Indicates if the feed is explicit or clean.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ContentAdvisoryRating {
    #[serde(rename = "Clean")]
    Clean,
    #[serde(rename = "Explicit")]
    Explicit,
}

impl Default for ContentAdvisoryRating {
    fn default() -> ContentAdvisoryRating {
        Self::Clean
    }
}
/// Indicates if the episode is marked explicit.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TrackExplicitness {
    #[serde(rename = "explicit")]
    Explicit,
    #[serde(rename = "cleaned")]
    Cleaned,
}

impl Default for TrackExplicitness {
    fn default() -> TrackExplicitness {
        Self::Explicit
    }
}
